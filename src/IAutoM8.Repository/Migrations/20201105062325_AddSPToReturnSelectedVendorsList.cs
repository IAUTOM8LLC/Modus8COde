using Microsoft.EntityFrameworkCore.Migrations;
using System;
using System.Collections.Generic;

namespace IAutoM8.Repository.Migrations
{
    public partial class AddSPToReturnSelectedVendorsList : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            var sql = @"CREATE PROCEDURE USP_AutoSelectOutsourcer 
 @FORMULAID INT , @OPTIONTYPE NVARCHAR(100)
 AS
--DROP TABLE #TEMP1
--DROP TABLE #TEMP2 

BEGIN

SELECT DISTINCT @OPTIONTYPE AS OPTIONTYPE , FORMULATASKS.FORMULAID, FORMULATASKS.FT_ID
,CASE WHEN @OPTIONTYPE = 'TOPRATED' THEN RATING.OUTSOURCER_GUID
	 WHEN @OPTIONTYPE = 'CHEAPEST' THEN CHEAPEST.OUTSOURCER_GUID
	 WHEN @OPTIONTYPE = 'FIRSTAVAILABLE' THEN FIRSTAVAILABLE.OUTSOURCER_GUID
	 END AS OUTSOURCER_GUID

,CASE WHEN @OPTIONTYPE = 'TOPRATED' THEN RATING.OUTSOURCER_RATING
	 WHEN @OPTIONTYPE = 'CHEAPEST' THEN CHEAPEST.OUTSOURCER_RATING
	 WHEN @OPTIONTYPE = 'FIRSTAVAILABLE' THEN FIRSTAVAILABLE.OUTSOURCER_RATING
	 END AS OUTSOURCER_RATING

,CASE WHEN @OPTIONTYPE = 'TOPRATED' THEN RATING.OUTSOURCER_PRICE
	 WHEN @OPTIONTYPE = 'CHEAPEST' THEN CHEAPEST.OUTSOURCER_PRICE
	 WHEN @OPTIONTYPE = 'FIRSTAVAILABLE' THEN FIRSTAVAILABLE.OUTSOURCER_PRICE
	 END AS OUTSOURCER_PRICE
--RATING.*
--CHEAPEST.*

INTO #TEMP1
 FROM 
(
SELECT DISTINCT FP.Id AS FORMULAID
	,FT.Id AS FT_ID
	FROM FORMULAPROJECT FP
	INNER JOIN FormulaTask FT ON FP.Id = FT.FormulaProjectId
	INNER JOIN FORMULATASKVENDOR FTV ON FT.ID = FTV.FormulaTaskId AND FTV.Status = 3  -- status 3 means certified vendor  
	WHERE FP.Id = @FORMULAID
) FORMULATASKS

LEFT JOIN (
	SELECT DISTINCT FP.Id AS FORMULAID
	,FT.Id AS FT_ID
	,FTV.VENDORGUID AS OUTSOURCER_GUID
	,AVG(FTS.Value) AS OUTSOURCER_RATING
	,null AS OUTSOURCER_PRICE
	 FROM FORMULAPROJECT FP
	INNER JOIN FormulaTask FT ON FP.Id = FT.FormulaProjectId
	INNER JOIN FORMULATASKVENDOR FTV ON FT.ID = FTV.FormulaTaskId AND FTV.Status = 3  -- status 3 means certified vendor   
	INNER JOIN FORMULATASKSTATISTIC FTS ON FT.Id = FTS.FormulaTaskId AND FTV.VendorGuid = FTS.VendorGuid AND FTS.TYPE = 2
	WHERE FP.Id = @FORMULAID
	GROUP BY FP.Id,FT.Id, FTV.VENDORGUID
	
) RATING ON FORMULATASKS.FORMULAID = RATING.FORMULAID AND FORMULATASKS.FT_ID = RATING.FT_ID

LEFT JOIN (
	SELECT DISTINCT FP.Id AS FORMULAID
	,FT.Id AS FT_ID
	,FTV.VENDORGUID AS OUTSOURCER_GUID
	,null AS OUTSOURCER_RATING
	,FTV.PRICE AS OUTSOURCER_PRICE
	 FROM FORMULAPROJECT FP
	INNER JOIN FormulaTask FT ON FP.Id = FT.FormulaProjectId
	INNER JOIN FORMULATASKVENDOR FTV ON FT.ID = FTV.FormulaTaskId AND FTV.Status = 3  -- status 3 means certified vendor   
	LEFT JOIN FORMULATASKSTATISTIC FTS ON FT.Id = FTS.FormulaTaskId AND FTV.VendorGuid = FTS.VendorGuid AND FTS.TYPE = 2
	WHERE FP.Id = @FORMULAID
	
) CHEAPEST ON FORMULATASKS.FORMULAID = CHEAPEST.FORMULAID AND FORMULATASKS.FT_ID = CHEAPEST.FT_ID

LEFT JOIN (
	SELECT DISTINCT FP.Id AS FORMULAID
	,FT.Id AS FT_ID
	,FTV.VENDORGUID AS OUTSOURCER_GUID
	,NULL AS OUTSOURCER_RATING
	,NULL AS OUTSOURCER_PRICE
	 FROM FORMULAPROJECT FP
	INNER JOIN FormulaTask FT ON FP.Id = FT.FormulaProjectId
	INNER JOIN FORMULATASKVENDOR FTV ON FT.ID = FTV.FormulaTaskId AND FTV.Status = 3  -- status 3 means certified vendor   
	LEFT JOIN FORMULATASKSTATISTIC FTS ON FT.Id = FTS.FormulaTaskId AND FTV.VendorGuid = FTS.VendorGuid AND FTS.TYPE = 2
	WHERE FP.Id = @FORMULAID
	
) FIRSTAVAILABLE ON FORMULATASKS.FORMULAID = FIRSTAVAILABLE.FORMULAID AND FORMULATASKS.FT_ID = FIRSTAVAILABLE.FT_ID

--ORDER BY -- OUTSOURCER_RATING,OUTSOURCER_PRICE,OUTSOURCER_GUID
--	CASE WHEN @OPTIONTYPE = 'RATING' THEN OUTSOURCER_RATING END --,
----	CASE WHEN @OPTIONTYPE = 'CHEAPEST' THEN CHEAPEST.OUTSOURCER_PRICE  END ASC--,
----	CASE WHEN @OPTIONTYPE = 'FIRSTAVAILABLE' THEN FIRSTAVAILABLE.OUTSOURCER_GUID END 


SELECT DISTINCT
OPTIONTYPE,	FORMULAID,	FT_ID	,OUTSOURCER_GUID	,OUTSOURCER_RATING	,OUTSOURCER_PRICE
, row_number() OVER (PARTITION BY OPTIONTYPE,FORMULAID,FT_ID ORDER BY OUTSOURCER_RATING DESC,OUTSOURCER_PRICE ASC, OUTSOURCER_GUID) AS RNK
, count(OUTSOURCER_GUID) OVER (PARTITION BY OPTIONTYPE,FORMULAID,FT_ID ) AS COUNT_OUTSOURCERS 
INTO #TEMP2
FROM #TEMP1

--SELECT * FROM #TEMP2
--WHERE (COUNT_OUTSOURCERS <=3 ) OR (COUNT_OUTSOURCERS >=4 AND RNK <= ROUND((COUNT_OUTSOURCERS*0.3),0) )
--ORDER BY RNK

IF  @OPTIONTYPE = 'FIRSTAVAILABLE'
	BEGIN
	SELECT * FROM #TEMP2
	--WHERE (COUNT_OUTSOURCERS <=3 ) OR (COUNT_OUTSOURCERS >=4 AND RNK <= ROUND((COUNT_OUTSOURCERS*0.3),0) )
	ORDER BY RNK
	END

ELSE
	BEGIN
	SELECT * FROM #TEMP2
	WHERE (COUNT_OUTSOURCERS <=3 ) OR (COUNT_OUTSOURCERS >=4 AND RNK <= ROUND((COUNT_OUTSOURCERS*0.3),0) )
	ORDER BY RNK
	END

END";

            migrationBuilder.Sql(sql);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(@"DROP PROCEDURE IF EXISTS [dbo].[USP_AutoSelectOutsourcer];");
        }
    }
}
