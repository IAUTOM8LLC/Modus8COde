// <auto-generated />
using IAutoM8.Global.Enums;
using IAutoM8.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IAutoM8.Repository.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190811145344_Dont-Remove-CreditLog")]
    partial class DontRemoveCreditLog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IAutoM8.Domain.Models.Business.Business", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.Property<string>("Occupation");

                    b.Property<DateTime>("ToDoSummaryTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("UserId");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Client.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BusinessOwnerGuid");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50);

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<string>("StreetAddress1")
                        .HasMaxLength(100);

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(100);

                    b.Property<string>("Zip")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("BusinessOwnerGuid");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Credits.CreditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("AmountWithTax");

                    b.Property<DateTime>("HistoryTime");

                    b.Property<Guid>("ManagerId");

                    b.Property<int?>("ProjectTaskId");

                    b.Property<int>("Type");

                    b.Property<Guid?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("HistoryTime");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("VendorId");

                    b.ToTable("CreditLog");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Credits.Credits", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("BraintreeCustomerId");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<decimal>("TotalCredits");

                    b.HasKey("UserId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Credits.CreditsTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Fee");

                    b.Property<float>("Percentage");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("CreditsTax");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Credits.TransferRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDone");

                    b.Property<DateTime>("RequestTime");

                    b.Property<decimal>("RequestedAmount");

                    b.Property<decimal>("RequestedAmountWithTax");

                    b.Property<Guid>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("RequestTime");

                    b.HasIndex("VendorId");

                    b.ToTable("TransferRequest");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsResharingAllowed");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("OriginalFormulaProjectId");

                    b.Property<Guid>("OwnerGuid");

                    b.Property<byte>("ShareType");

                    b.HasKey("Id");

                    b.HasIndex("OriginalFormulaProjectId");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("FormulaProject");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaProjectCategory", b =>
                {
                    b.Property<int>("FormulaProjectId");

                    b.Property<int>("CategoryId");

                    b.HasKey("FormulaProjectId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("FormulaProjectCategory");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaShare", b =>
                {
                    b.Property<int>("FormulaProjectId");

                    b.Property<Guid>("UserId");

                    b.HasKey("FormulaProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FormulaShare");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedSkillId");

                    b.Property<int?>("AssignedTeamId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<int?>("Duration");

                    b.Property<int>("FormulaProjectId");

                    b.Property<int?>("InternalFormulaProjectId");

                    b.Property<bool>("IsAutomated");

                    b.Property<bool>("IsInterval");

                    b.Property<bool>("IsShareResources")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<int?>("OriginalFormulaTaskId");

                    b.Property<Guid>("OwnerGuid");

                    b.Property<int>("PosX");

                    b.Property<int>("PosY");

                    b.Property<int?>("RecurrenceOptionsId");

                    b.Property<int?>("ReviewingSkillId");

                    b.Property<int?>("ReviewingTeamId");

                    b.Property<int>("StartDelay");

                    b.Property<int?>("TaskConditionId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AssignedSkillId");

                    b.HasIndex("AssignedTeamId");

                    b.HasIndex("FormulaProjectId");

                    b.HasIndex("InternalFormulaProjectId");

                    b.HasIndex("OriginalFormulaTaskId");

                    b.HasIndex("OwnerGuid");

                    b.HasIndex("RecurrenceOptionsId")
                        .IsUnique()
                        .HasFilter("[RecurrenceOptionsId] IS NOT NULL");

                    b.HasIndex("ReviewingSkillId");

                    b.HasIndex("ReviewingTeamId");

                    b.HasIndex("TaskConditionId")
                        .IsUnique()
                        .HasFilter("[TaskConditionId] IS NOT NULL");

                    b.ToTable("FormulaTask");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("FormulaTaskCondition");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskConditionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedTaskId");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("TaskConditionId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTaskId");

                    b.HasIndex("TaskConditionId");

                    b.ToTable("FormulaTaskConditionOption");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskDependency", b =>
                {
                    b.Property<int>("ParentTaskId");

                    b.Property<int>("ChildTaskId");

                    b.Property<bool>("Required");

                    b.HasKey("ParentTaskId", "ChildTaskId");

                    b.HasIndex("ChildTaskId");

                    b.ToTable("FormulaTaskDependency");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BussinessId");

                    b.Property<bool>("Enabled");

                    b.Property<Guid?>("RoleId");

                    b.Property<int?>("TaskId");

                    b.Property<int>("Type");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BussinessId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSetting");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Details");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("OwnerGuid");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedSkillId");

                    b.Property<int?>("AssignedTeamId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DueDate");

                    b.Property<int?>("Duration");

                    b.Property<int?>("FormulaId");

                    b.Property<int?>("FormulaTaskId");

                    b.Property<bool>("IsAutomated");

                    b.Property<bool>("IsInterval");

                    b.Property<bool>("IsShareResources")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<Guid>("OwnerGuid");

                    b.Property<int?>("ParentTaskId");

                    b.Property<int>("PosX");

                    b.Property<int>("PosY");

                    b.Property<Guid?>("ProccessingUserGuid");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("RecurrenceOptionsId");

                    b.Property<int?>("ReviewingSkillId");

                    b.Property<int?>("ReviewingTeamId");

                    b.Property<Guid?>("ReviewingUserGuid");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("StartDelay");

                    b.Property<short>("Status");

                    b.Property<int?>("TaskConditionId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<int?>("TreeDetailId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedSkillId");

                    b.HasIndex("AssignedTeamId");

                    b.HasIndex("FormulaId");

                    b.HasIndex("FormulaTaskId");

                    b.HasIndex("OwnerGuid");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProccessingUserGuid");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RecurrenceOptionsId")
                        .IsUnique()
                        .HasFilter("[RecurrenceOptionsId] IS NOT NULL");

                    b.HasIndex("ReviewingSkillId");

                    b.HasIndex("ReviewingTeamId");

                    b.HasIndex("ReviewingUserGuid");

                    b.HasIndex("TaskConditionId")
                        .IsUnique()
                        .HasFilter("[TaskConditionId] IS NOT NULL");

                    b.ToTable("ProjectTask");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("ProjectTaskId");

                    b.Property<string>("Text")
                        .HasMaxLength(500);

                    b.Property<Guid>("UserGuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("UserGuid");

                    b.ToTable("ProjectTaskComment");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ProjectTaskCondition");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskConditionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedTaskId");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("TaskConditionId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTaskId");

                    b.HasIndex("TaskConditionId");

                    b.ToTable("ProjectTaskConditionOption");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskDependency", b =>
                {
                    b.Property<int>("ParentTaskId");

                    b.Property<int>("ChildTaskId");

                    b.Property<bool>("Required");

                    b.HasKey("ParentTaskId", "ChildTaskId");

                    b.HasIndex("ChildTaskId");

                    b.ToTable("ProjectTaskDependency");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskUser", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("ProjectTaskId");

                    b.Property<int>("ProjectTaskUserType");

                    b.HasKey("UserId", "ProjectTaskId", "ProjectTaskUserType");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskUser");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.TaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("HistoryTime");

                    b.Property<int?>("ProjectTaskConditionOptionId");

                    b.Property<int>("TaskId");

                    b.Property<short>("Type");

                    b.Property<Guid?>("UserGuid");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("HistoryTime");

                    b.HasIndex("ProjectTaskConditionOptionId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskHistory");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.TaskJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HangfireJobId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TaskId");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskJob");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.RecurrenceOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cron")
                        .HasMaxLength(50);

                    b.Property<byte>("CronTab");

                    b.Property<byte>("DayDiff")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("EndRecurrenceDate");

                    b.Property<bool>("IsAsap")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("MaxOccurrences");

                    b.Property<DateTime?>("NextOccurenceDate");

                    b.Property<int>("Occurrences");

                    b.Property<int>("RecurrenceType");

                    b.HasKey("Id");

                    b.ToTable("RecurrenceOptions");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Mime")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Path")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("")
                        .HasMaxLength(300);

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.ResourceFormula", b =>
                {
                    b.Property<int>("ResourceId");

                    b.Property<int>("FormulaId");

                    b.HasKey("ResourceId", "FormulaId");

                    b.HasIndex("FormulaId");

                    b.ToTable("ResourceFormula");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.ResourceFormulaTask", b =>
                {
                    b.Property<int>("ResourceId");

                    b.Property<int>("FormulaTaskId");

                    b.HasKey("ResourceId", "FormulaTaskId");

                    b.HasIndex("FormulaTaskId");

                    b.ToTable("ResourceFormulaTask");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.ResourceProject", b =>
                {
                    b.Property<int>("ResourceId");

                    b.Property<int>("ProjectId");

                    b.HasKey("ResourceId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ResourceProject");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.ResourceProjectTask", b =>
                {
                    b.Property<int>("ResourceId");

                    b.Property<int>("ProjectTaskId");

                    b.HasKey("ResourceId", "ProjectTaskId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ResourceProjectTask");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Skill.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("OwnerGuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Skill.UserSkill", b =>
                {
                    b.Property<int>("SkillId");

                    b.Property<Guid>("UserId");

                    b.HasKey("SkillId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkill");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Team.FormulaTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("OwnerGuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("FormulaTeam");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Team.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("OwnerGuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Team.TeamUser", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<Guid>("UserId");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.InfusionSignUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContactId");

                    b.Property<string>("Email");

                    b.Property<int>("OrderId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("InfusionSignUp");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsPayed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("OwnerId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OwnerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserProfile", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("AffiliateCode")
                        .HasMaxLength(20);

                    b.Property<int?>("AffiliateId");

                    b.Property<string>("AffiliatePass")
                        .HasMaxLength(10);

                    b.Property<int?>("ContactId");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("FullName");

                    b.Property<short>("Gender");

                    b.HasKey("UserId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserProject", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("ProjectId");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProject");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Vendor.FormulaTaskStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Completed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("FormulaTaskId");

                    b.Property<int?>("FormulaTaskStatisticId");

                    b.Property<int>("ProjectTaskId");

                    b.Property<byte>("Type");

                    b.Property<short?>("Value");

                    b.Property<Guid>("VendorGuid");

                    b.HasKey("Id");

                    b.ToTable("FormulaTaskStatistic");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Vendor.FormulaTaskVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int>("FormulaTaskId");

                    b.Property<DateTime?>("LastModified");

                    b.Property<decimal>("Price");

                    b.Property<byte>("Status");

                    b.Property<Guid>("VendorGuid");

                    b.HasKey("Id");

                    b.HasIndex("FormulaTaskId");

                    b.HasIndex("VendorGuid");

                    b.ToTable("FormulaTaskVendor");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Vendor.ProjectTaskVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("LastModified");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProjectTaskId");

                    b.Property<byte>("Status");

                    b.Property<Guid>("VendorGuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("VendorGuid");

                    b.ToTable("ProjectTaskVendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Business.Business", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithOne("Business")
                        .HasForeignKey("IAutoM8.Domain.Models.Business.Business", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Client.Client", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "BusinessOwner")
                        .WithMany("Clients")
                        .HasForeignKey("BusinessOwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Credits.CreditLog", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Manager")
                        .WithMany("ManagerCreditLogs")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ProjectTask")
                        .WithMany("CreditLogs")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Vendor")
                        .WithMany("VendorCreditLogs")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Credits.Credits", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithOne("Credits")
                        .HasForeignKey("IAutoM8.Domain.Models.Credits.Credits", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Credits.TransferRequest", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Vendor")
                        .WithMany("TransferRequests")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaProject", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "OriginalFormulaProject")
                        .WithMany("ChildFormulaProjects")
                        .HasForeignKey("OriginalFormulaProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("UserCreatedFormulaProjects")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaProjectCategory", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.Category", "Category")
                        .WithMany("FormulaProjectCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "FormulaProject")
                        .WithMany("FormulaProjectCategories")
                        .HasForeignKey("FormulaProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaShare", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "FormulaProject")
                        .WithMany("FormulaShares")
                        .HasForeignKey("FormulaProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "AccessHolder")
                        .WithMany("AccessibleFormulas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTask", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Skill.Skill", "AssignedSkill")
                        .WithMany("AssignedFormulaTasks")
                        .HasForeignKey("AssignedSkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Team.FormulaTeam", "AssignedTeam")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "FormulaProject")
                        .WithMany("FormulaTasks")
                        .HasForeignKey("FormulaProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "InternalFormulaProject")
                        .WithMany("InternalFormulaTasks")
                        .HasForeignKey("InternalFormulaProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "OriginalFormulaTask")
                        .WithMany("ChildFormulaTasks")
                        .HasForeignKey("OriginalFormulaTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("UserCreatedFormulaTasks")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.RecurrenceOptions", "RecurrenceOptions")
                        .WithOne()
                        .HasForeignKey("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "RecurrenceOptionsId");

                    b.HasOne("IAutoM8.Domain.Models.Skill.Skill", "ReviewingSkill")
                        .WithMany("ReviewingFormulaTasks")
                        .HasForeignKey("ReviewingSkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Team.FormulaTeam", "ReviewingTeam")
                        .WithMany("ReviewingTasks")
                        .HasForeignKey("ReviewingTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTaskCondition", "Condition")
                        .WithOne("Task")
                        .HasForeignKey("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "TaskConditionId");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskConditionOption", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "AssignedTask")
                        .WithMany("AssignedConditionOptions")
                        .HasForeignKey("AssignedTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTaskCondition", "Condition")
                        .WithMany("Options")
                        .HasForeignKey("TaskConditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskDependency", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "ChildTask")
                        .WithMany("ParentTasks")
                        .HasForeignKey("ChildTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "ParentTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.NotificationSetting", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Business.Business", "Bussiness")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("BussinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.User.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "Task")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Project", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Client.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId");

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("UserCreatedProjects")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTask", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Skill.Skill", "AssignedSkill")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedSkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Team.Team", "AssignedTeam")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "FormulaProject")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "FormulaTask")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("FormulaTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("UserCreatedTasks")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ParentTask")
                        .WithMany("FormulaProjectTask")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "ProccessingUser")
                        .WithMany("ProccessingTasks")
                        .HasForeignKey("ProccessingUserGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Project.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.RecurrenceOptions", "RecurrenceOptions")
                        .WithOne()
                        .HasForeignKey("IAutoM8.Domain.Models.Project.Task.ProjectTask", "RecurrenceOptionsId");

                    b.HasOne("IAutoM8.Domain.Models.Skill.Skill", "ReviewingSkill")
                        .WithMany("ReviewingTasks")
                        .HasForeignKey("ReviewingSkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Team.Team", "ReviewingTeam")
                        .WithMany("ReviewingTasks")
                        .HasForeignKey("ReviewingTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "ReviewingUser")
                        .WithMany("ReviewingTasks")
                        .HasForeignKey("ReviewingUserGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTaskCondition", "Condition")
                        .WithOne("Task")
                        .HasForeignKey("IAutoM8.Domain.Models.Project.Task.ProjectTask", "TaskConditionId");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskComment", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskComments")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("ProjectTaskComments")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskConditionOption", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "AssignedTask")
                        .WithMany("AssignedConditionOptions")
                        .HasForeignKey("AssignedTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTaskCondition", "Condition")
                        .WithMany("Options")
                        .HasForeignKey("TaskConditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskDependency", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ChildTask")
                        .WithMany("ParentTasks")
                        .HasForeignKey("ChildTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ParentTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskUser", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskUsers")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("ProjectTaskUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.TaskHistory", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTaskConditionOption", "ProjectTaskConditionOption")
                        .WithMany("TaskHistories")
                        .HasForeignKey("ProjectTaskConditionOptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "Task")
                        .WithMany("TaskHistories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("TaskHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.TaskJob", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "Task")
                        .WithMany("TaskJobs")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.ResourceFormula", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "Formula")
                        .WithMany("ResourceFormula")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Resource.Resource", "Resource")
                        .WithMany("ResourceFormula")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.ResourceFormulaTask", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "FormulaTask")
                        .WithMany("ResourceFormulaTask")
                        .HasForeignKey("FormulaTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Resource.Resource", "Resource")
                        .WithMany("ResourceFormulaTask")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.ResourceProject", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Project", "Project")
                        .WithMany("ResourceProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Resource.Resource", "Resource")
                        .WithMany("ResourceProject")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Resource.ResourceProjectTask", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ProjectTask")
                        .WithMany("ResourceProjectTask")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Resource.Resource", "Resource")
                        .WithMany("ResourceProjectTask")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Skill.Skill", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("Skills")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Skill.UserSkill", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Skill.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Team.FormulaTeam", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("FormulaTeams")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Team.Team", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("Teams")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Team.TeamUser", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Team.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.User", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("AssignUsers")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserProfile", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("IAutoM8.Domain.Models.User.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserProject", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserRole", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Vendor.FormulaTaskVendor", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "FormulaTask")
                        .WithMany("FormulaTaskVendors")
                        .HasForeignKey("FormulaTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Vendor")
                        .WithMany("FormulaTaskVendors")
                        .HasForeignKey("VendorGuid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Vendor.ProjectTaskVendor", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskVendors")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Vendor")
                        .WithMany("ProjectTaskVendors")
                        .HasForeignKey("VendorGuid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
