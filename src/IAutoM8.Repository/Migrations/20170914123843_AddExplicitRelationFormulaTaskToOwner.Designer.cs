// <auto-generated />
using IAutoM8.Global.Enums;
using IAutoM8.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IAutoM8.Repository.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20170914123843_AddExplicitRelationFormulaTaskToOwner")]
    partial class AddExplicitRelationFormulaTaskToOwner
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IAutoM8.Domain.Models.Business.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.Property<string>("Occupation");

                    b.Property<string>("TimeZoneId");

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OwnerGuid");

                    b.Property<byte>("ShareType");

                    b.HasKey("Id");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("FormulaProject");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaShare", b =>
                {
                    b.Property<int>("FormulaProjectId");

                    b.Property<Guid>("UserId");

                    b.HasKey("FormulaProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FormulaShare");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedTeamId");

                    b.Property<string>("Cron")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<int?>("Duration");

                    b.Property<DateTime?>("EndRecurrenceDate");

                    b.Property<int>("FormulaProjectId");

                    b.Property<bool>("IsConditional");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<int>("MaxOccurrences");

                    b.Property<Guid>("OwnerGuid");

                    b.Property<int>("PosX");

                    b.Property<int>("PosY");

                    b.Property<int>("RecurrenceType");

                    b.Property<int?>("ReviewingTeamId");

                    b.Property<string>("Tab");

                    b.Property<int?>("TaskConditionId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("FormulaProjectId");

                    b.HasIndex("OwnerGuid");

                    b.HasIndex("TaskConditionId")
                        .IsUnique()
                        .HasFilter("[TaskConditionId] IS NOT NULL");

                    b.ToTable("FormulaTask");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("FormulaTaskCondition");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskConditionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedTaskId");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("TaskConditionId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTaskId");

                    b.HasIndex("TaskConditionId");

                    b.ToTable("FormulaTaskConditionOption");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskDependency", b =>
                {
                    b.Property<int>("ParentTaskId");

                    b.Property<int>("ChildTaskId");

                    b.Property<bool>("Required");

                    b.HasKey("ParentTaskId", "ChildTaskId");

                    b.HasIndex("ChildTaskId");

                    b.ToTable("FormulaTaskDependency");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Details");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OwnerGuid");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedTeamId");

                    b.Property<string>("Cron")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DueDate");

                    b.Property<int?>("Duration");

                    b.Property<bool>("IsAutomated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<Guid>("OwnerGuid");

                    b.Property<int>("PosX");

                    b.Property<int>("PosY");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("ReviewingTeamId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<short>("Status");

                    b.Property<int?>("TaskConditionId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OwnerGuid");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskConditionId")
                        .IsUnique()
                        .HasFilter("[TaskConditionId] IS NOT NULL");

                    b.ToTable("ProjectTask");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ProjectTaskCondition");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskConditionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedTaskId");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("TaskConditionId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTaskId");

                    b.HasIndex("TaskConditionId");

                    b.ToTable("ProjectTaskConditionOption");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskDependency", b =>
                {
                    b.Property<int>("ParentTaskId");

                    b.Property<int>("ChildTaskId");

                    b.Property<bool>("Required");

                    b.HasKey("ParentTaskId", "ChildTaskId");

                    b.HasIndex("ChildTaskId");

                    b.ToTable("ProjectTaskDependency");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.TaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("HistoryTime");

                    b.Property<int>("TaskId");

                    b.Property<short>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHistory");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.TaskJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HangfireJobId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TaskId");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskJob");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid?>("BusinessId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("OwnerId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique()
                        .HasFilter("[BusinessId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OwnerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserProfile", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("FullName");

                    b.Property<short>("Gender");

                    b.HasKey("UserId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserProject", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("ProjectId");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProject");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaProject", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("UserCreatedFormulaProjects")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.FormulaShare", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "FormulaProject")
                        .WithMany("FormulaShares")
                        .HasForeignKey("FormulaProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "AccessHolder")
                        .WithMany("AccessibleFormulas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTask", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.FormulaProject", "FormulaProject")
                        .WithMany("FormulaTasks")
                        .HasForeignKey("FormulaProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("UserCreatedFormulaTasks")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTaskCondition", "Condition")
                        .WithOne("Task")
                        .HasForeignKey("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "TaskConditionId");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskConditionOption", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "AssignedTask")
                        .WithMany("AssignedConditionOptions")
                        .HasForeignKey("AssignedTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTaskCondition")
                        .WithMany("Options")
                        .HasForeignKey("TaskConditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Formula.Task.FormulaTaskDependency", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "ChildTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("ChildTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Formula.Task.FormulaTask", "ParentTask")
                        .WithMany("ParentTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Project", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("UserCreatedProjects")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTask", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("UserCreatedTasks")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.Project.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTaskCondition", "Condition")
                        .WithOne("Task")
                        .HasForeignKey("IAutoM8.Domain.Models.Project.Task.ProjectTask", "TaskConditionId");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskConditionOption", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "AssignedTask")
                        .WithMany("AssignedConditionOptions")
                        .HasForeignKey("AssignedTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTaskCondition")
                        .WithMany("Options")
                        .HasForeignKey("TaskConditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.ProjectTaskDependency", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ChildTask")
                        .WithMany("ParentTasks")
                        .HasForeignKey("ChildTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "ParentTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.TaskHistory", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "Task")
                        .WithMany("TaskHistories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.Project.Task.TaskJob", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Task.ProjectTask", "Task")
                        .WithMany("TaskJobs")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.User", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Business.Business", "Business")
                        .WithOne("Owner")
                        .HasForeignKey("IAutoM8.Domain.Models.User.User", "BusinessId");

                    b.HasOne("IAutoM8.Domain.Models.User.User", "Owner")
                        .WithMany("AssignUsers")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserProfile", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("IAutoM8.Domain.Models.User.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserProject", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.Project.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IAutoM8.Domain.Models.User.UserRole", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAutoM8.Domain.Models.User.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IAutoM8.Domain.Models.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
